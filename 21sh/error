[31m[38;5;34m.[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[1;33m~[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;34m.[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;34m.[0m[31m[38;5;160mx[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m                                              

----------------------------------------------------------------

[37;1m21sh/misc/002-simple-command-line[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that the Shell is able to execute a simple command line that contains separators `;`, pipes `|`, and a right redirection `>`.[0m

  Before test:
[38;5;239m  01: rm -rf "./size"
  02: rm -rf "TOKEN201902101412"
  03: echo '^'$(echo TOKEN201902101412_FILE_TOKEN201902101412_STDOUT | wc -c)'$' > "./size"[0m

  STDIN:
[38;5;239m  01: mkdir TOKEN201902101412 ; cd TOKEN201902101412 ; touch TOKEN201902101412_FILE ; ls -1 ; ls | cat | wc -c > TOKEN201902101412_STDOUT ; cat TOKEN201902101412_STDOUT[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to match_regex `TOKEN201902101412_FILE$`[0m
[31m[38;5;160m  FAILURE    expected_to match_each_regex_of_file `./size`[0m
[38;5;239m  01: TOKEN201902101412_FILE[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: ls: -c: No such file or directory
  02: ls: >: No such file or directory
  03: ls: TOKEN201902101412_STDOUT: No such file or directory
  04: ls: cat: No such file or directory
  05: ls: wc: No such file or directory
  06: ls: |: No such file or directory
  07: ls: |: No such file or directory
  08: cat: TOKEN201902101412_STDOUT: No such file or directory[0m

----------------------------------------------------------------

[37;1m21sh/pipe/001-single-pipe[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  Simple test with one piped command.
  The first process write a token on STDOUT and another on STDERR, then the second one read on STDIN and write lines suffixed with the character '@' (similar to `cat -e`).[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr | ./read_on_stdin[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stdout@$`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stderr$`[0m
[38;5;239m  01: write on stderr[0m

----------------------------------------------------------------

[37;1m21sh/pipe/002-chained-pipes[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  Simple test with two piped commands.
  The first process write a token on STDOUT and another on STDERR, then the second one read on STDIN and write lines suffixed with the character '@' (similar to `cat -e`). The third one does the same as the second one, so that lines are suffixed with '@@'.[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr | ./read_on_stdin | ./read_on_stdin[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stdout@@$`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stderr$`[0m
[38;5;239m  01: write on stderr[0m

----------------------------------------------------------------

[37;1m21sh/pipe/003-many-chained-pipes[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  One line with many piped commands.
  The first process write a token on STDOUT and another on STDERR, then the others read on STDIN and write lines suffixed with the character '@' (similar to `cat -e`). The full command line results in an output suffixed with ten characters '@@@@@@@@@@'.[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin | ./read_on_stdin[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stdout@@@@@@@@@@$`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stderr$`[0m
[38;5;239m  01: write on stderr[0m

----------------------------------------------------------------

[37;1m21sh/pipe/004-without-surrounding-whitespaces[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  A pipe character `|` that is not enclosed in double-quotes is interpreted as a pipe separator even if it is closely placed to the next and previous command fields.[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout TOKEN201902101412|./read_on_stdin[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412@$`[0m
[38;5;239m  01: TOKEN201902101412|./read_on_stdin[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

----------------------------------------------------------------

[37;1m21sh/pipe/005-asynchronous[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that the Shell waits for all the commands specified in a pipeline to complete before looking after the next command line. In this test, the first command of the pipeline takes a longer time to complete than the next one, so that the outputs should appear in a reverse order. The Shell should wait for the two processes to complete and then launch the second command line.[0m

  STDIN:
[38;5;239m  01: ./sleep_and_write_on_stderr 1 TOKEN201902101412_FIRST | ./sleep_and_write_on_stderr 0 TOKEN201902101412_SECOND
  02: ./sleep_and_write_on_stderr 0 TOKEN201902101412_LAST[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_SECONDTOKEN201902101412_FIRSTTOKEN201902101412_LAST`[0m
[38;5;239m  01: TOKEN201902101412_FIRSTTOKEN201902101412_LAST[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to exit_with_status `0`[0m

----------------------------------------------------------------

[37;1m21sh/pipe/006-exit-status[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that the exit status of a pipeline command is the same as the last piped process.[0m

  STDIN:
[38;5;239m  01: ./sleep_and_exit_with_status 1 21 | ./exit_with_status 42[0m

  STDOUT:
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

  MISC:
[31m[38;5;160m  FAILURE    expected_to exit_with_status `42`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/inputs/001-close-stdin[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using the closing operator `&-` within the STDIN redirection `<` results in a closed standard input, so that `read(2)` results in a read error.[0m

  Before test:
[38;5;239m  01: rm -f ./read_on_stdin
  02: gcc -Wall -Werror -Wextra "/Users/hugohow-choong/42ShellTester/support/read-on-stdin/main.c" -o ./read_on_stdin[0m

  STDIN:
[38;5;239m  01: ./read_on_stdin <&-[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    might be_empty[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `STDIN READ ERROR$`[0m
[38;5;239m  01: shell: command not found: &-[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to exit_with_status `1`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/inputs/002-filename[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using a file path `simple_text_file` within the STDIN redirection `<` results in the ability of the child process to read on this file through the file descriptor STDIN.[0m

  Before test:
[38;5;239m  01: echo "TOKEN201902101412_LINE_1" > simple_text_file
  02: echo "TOKEN201902101412_LINE_2" >> simple_text_file
  03: echo "TOKEN201902101412_LINE_3" >> simple_text_file[0m

  STDIN:
[38;5;239m  01: ./read_on_stdin <simple_text_file[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_1`[0m
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_2`[0m
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_3`[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: Permission denied[0m

  MISC:
[31m[38;5;160m  FAILURE    expected_to exit_with_status `0`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/inputs/003-filename-with-whitespaces[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using a file path `simple_text_file` within the STDIN redirection `<` results in the ability of the child process to read on this file through the file descriptor STDIN.
  The file path is specified in a separated field.[0m

  Before test:
[38;5;239m  01: echo "TOKEN201902101412_LINE_1" > simple_text_file
  02: echo "TOKEN201902101412_LINE_2" >> simple_text_file
  03: echo "TOKEN201902101412_LINE_3" >> simple_text_file[0m

  STDIN:
[38;5;239m  01: ./read_on_stdin < 	 simple_text_file[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_1`[0m
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_2`[0m
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_3`[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: shell: command not found:  	 simple_text_file[0m

  MISC:
[31m[38;5;160m  FAILURE    expected_to exit_with_status `0`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/inputs/004-absolute-path[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using an absolute path to a file within the STDIN redirection `<` results in the ability of the child process to read on this file through the file descriptor STDIN.[0m

  Before test:
[38;5;239m  01: echo "TOKEN201902101412_LINE_1" > simple_text_file
  02: echo "TOKEN201902101412_LINE_2" >> simple_text_file
  03: echo "TOKEN201902101412_LINE_3" >> simple_text_file[0m

  STDIN:
[38;5;239m  01: ./read_on_stdin </Users/hugohow-choong/42ShellTester/tmp/simple_text_file[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_1`[0m
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_2`[0m
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_LINE_3`[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: Permission denied[0m

  MISC:
[31m[38;5;160m  FAILURE    expected_to exit_with_status `0`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/inputs/005-no-such-file[0m [31m[1;33m(WARNING)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using a wrong path within the STDIN redirection `<` results in an error.[0m

  Before test:
[38;5;239m  01: rm -f "./no_such_file"[0m

  STDIN:
[38;5;239m  01: ./read_on_stdin <no_such_file[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to_not be_empty[0m
[31m[1;33m  WARNING    might match_regex `[Nn]o such file or directory`[0m
[38;5;239m  01: shell: command not found: no_such_file[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to_not exit_with_status `0`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/appending/001-append-default-to-file[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  A double right redirection opens the file with the oflag `O_APPEND`, so that its size is not truncated to 0 and output is written at the end of file. If the file does not exist, it is created.
  In this test, the output to be redirected is not specified so that the standard output is appended to the file.[0m

  Before test:
[38;5;239m  01: ./write_on_stdout "TOKEN201902101412_first" >append_file_default[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_default TOKEN201902101412_stderr >>append_file_default[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `TOKEN201902101412_default`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stderr`[0m
[38;5;239m  01: write on stderr[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to create_file `append_file_default` matching_regex `TOKEN201902101412_first`[0m
[31m[38;5;34m  SUCCESS    expected_to create_file `append_file_default` matching_regex `TOKEN201902101412_default`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/appending/002-append-stdout-to-file[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  A double right redirection opens the file with the oflag `O_APPEND`, so that its size is not truncated to 0 and output is written at the end of file. If the file does not exist, it is created.
  In this test, the standard output is appended to the file.[0m

  Before test:
[38;5;239m  01: ./write_on_stdout "TOKEN201902101412_first" >append_file_stdout[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr 1>>append_file_stdout[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `TOKEN201902101412_stdout`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stderr`[0m
[38;5;239m  01: write on stderr[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to create_file `append_file_stdout` matching_regex `TOKEN201902101412_first`[0m
[31m[38;5;34m  SUCCESS    expected_to create_file `append_file_stdout` matching_regex `TOKEN201902101412_stdout`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/appending/003-append-stderr-to-file[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  A double right redirection opens the file with the oflag `O_APPEND`, so that its size is not truncated to 0 and output is written at the end of file. If the file does not exist, it is created.
  In this test, the standard error is appended to the file.[0m

  Before test:
[38;5;239m  01: ./write_on_stdout "TOKEN201902101412_first" >append_file_stderr[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr 2>>append_file_stderr[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stdout`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `TOKEN201902101412_stderr`[0m
[38;5;239m  01: write on stderr[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to create_file `append_file_stderr` matching_regex `TOKEN201902101412_first`[0m
[31m[38;5;34m  SUCCESS    expected_to create_file `append_file_stderr` matching_regex `TOKEN201902101412_stderr`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/closing/001-close-default-output[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  Not specifying which output to close makes the default standard output to be closed (`>&-` is similar to `1>&-`).
  Closing the standard output has the same behavior as redirecting to `/dev/null`.[0m

  Before test:
[38;5;239m  01: rm -f "-"[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr >&-[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `TOKEN201902101412_stdout`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stderr`[0m
[38;5;239m  01: write on stderr[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/closing/002-close-stdout[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  Closing the standard output has the same behavior as redirecting to `/dev/null` (e.g. `ls 1>/dev/null`).[0m

  Before test:
[38;5;239m  01: rm -f "-"[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr 1>&-[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `TOKEN201902101412_stdout`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stderr`[0m
[38;5;239m  01: write on stderr[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/closing/003-close-stderr[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  Closing the standard error has the same behavior as redirecting to `/dev/null` (e.g. `ls 2>/dev/null`).[0m

  Before test:
[38;5;239m  01: rm -f "-"[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_stdout TOKEN201902101412_stderr 2>&-[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_stdout`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `TOKEN201902101412_stderr`[0m
[38;5;239m  01: write on stderr[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/touching/001-works[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using the right redirection `>` without any command results in the creation of an empty file (same effect as `touch`).[0m

  Before test:
[38;5;239m  01: rm -f "./new_empty_file"[0m

  STDIN:
[38;5;239m  01: >new_empty_file[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: shell: command not found: >new_empty_file[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to create_file `new_empty_file`[0m
[31m[38;5;160m  FAILURE    expected_to exit_with_status `0`[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/truncating/stderr/001-works[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that redirecting the standard error STDERR to a file `2>` works. In this test, the binary writes a token on each standard and error output, so that only the STDOUT is outputted and STDERR is written in a file `new_file_stderr`.[0m

  Before test:
[38;5;239m  01: rm -f "./new_file_stderr"[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout_and_stderr TOKEN201902101412_STDOUT TOKEN201902101412_STDERR 2>new_file_stderr[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `TOKEN201902101412_STDOUT`[0m
[38;5;239m  01: write on stdout[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `TOKEN201902101412_STDERR`[0m
[38;5;239m  01: write on stderr[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to create_file `new_file_stderr` matching_regex `TOKEN201902101412_STDERR`[0m
[31m[38;5;34m  SUCCESS    expected_to create_file `new_file_stderr` with_nb_of_lines 1[0m

----------------------------------------------------------------

[37;1m21sh/redirections/outputs/truncating/stdout/001-with-explicit-fd[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check if '1>' redirect STDIN to a file.
  We are using echo with one argument. The output should NOT return anything on the standard output.[0m

  Before test:
[38;5;239m  01: rm -f new_file[0m

  STDIN:
[38;5;239m  01: /bin/echo TOKEN1 1>new_file[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to_not match_regex TOKEN1[0m
[38;5;239m  01: TOKEN1 1>new_file[0m

  STDERR:
[38;5;239m  (no output)[0m

  MISC:
[31m[38;5;34m  SUCCESS    expected_to create_file new_file matching_regex TOKEN1[0m
[31m[38;5;34m  SUCCESS    expected_to create_file new_file with_nb_of_lines 1[0m

----------------------------------------------------------------

[37;1m21sh/separators/semicolon/003-parse-error-empty-inline-command[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using the simicolon separator `;` with empty commands results in error.[0m

  STDIN:
[38;5;239m  01: ./write_on_stdout TOKEN201902101412 ; ; ./exit_with_status 42[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: TOKEN201902101412[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to_not be_empty[0m
[31m[1;33m  WARNING    might match_regex `([Ss]yntax|[Pp]arse) error`[0m
[38;5;239m  (no output)[0m

  MISC:
[31m[38;5;160m  FAILURE    expected_to_not exit_with_status `42`[0m
[31m[38;5;34m  SUCCESS    expected_to_not exit_with_status `0`[0m

----------------------------------------------------------------

[37;1m21sh/separators/semicolon/004-parse-error-empty-command[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that using the semicolon separator `;` without any command results in error.[0m

  STDIN:
[38;5;239m  01: ;[0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to_not be_empty[0m
[31m[1;33m  WARNING    might match_regex `([Pp]arse|[Ss]yntax) error`[0m
[38;5;239m  (no output)[0m

Total tests: 36
Total failed tests: 22
Total pending tests: 0
